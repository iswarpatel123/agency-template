---
import { states, type State } from "../../../data/states";

interface Props {
  type: "shipping" | "billing";
}

const { type } = Astro.props;
---

<form class="address-form" data-form-type={type}>
  <div class="title-bar">
    <h2>3. Tell Us Where To Ship</h2>
  </div>
  <div class="form-field">
    <input
      type="email"
      id="email"
      name="email"
      placeholder="Email Address"
      required
      class="address-input"
    />
  </div>
  <div class="name-fields">
    <div class="input-group">
      <input
        type="text"
        id={`firstName-${type}`}
        name="firstName"
        placeholder="First Name"
        required
        pattern="[a-zA-Z][a-zA-Z \-']*"
        maxlength="50"
        title="Please enter a valid first name (letters, spaces, hyphens, and apostrophes only)"
        class="address-input"
      />
    </div>
    <div class="input-group">
      <input
        type="text"
        id={`lastName-${type}`}
        name="lastName"
        placeholder="Last Name"
        required
        pattern="[a-zA-Z][a-zA-Z \-']*"
        maxlength="50"
        title="Please enter a valid last name (letters, spaces, hyphens, and apostrophes only)"
        class="address-input"
      />
    </div>
  </div>

  <label for={`${type}-country`}>Country/Region</label>
  <select id={`${type}-country`} name="country" required>
    <option value="US" selected>United States</option>
  </select>

  <div class="input-group">
    <input
      type="text"
      id={`address1-${type}`}
      name="address1"
      placeholder="Address Line 1"
      required
      pattern="[a-zA-Z0-9 .,\/#\-]{1,100}"
      title="Please enter a valid address"
      class="address-input"
    />
  </div>

  <input
    type="text"
    id={`address2-${type}`}
    name="address2"
    placeholder="Address Line 2 (Optional)"
    pattern="[a-zA-Z0-9 .,\/#\-]{0,100}"
    title="Please enter a valid address"
    class="address-input"
  />

  <div class="city-state-zip">
    <div class="input-group">
      <input
        type="text"
        id={`city-${type}`}
        name="city"
        placeholder="City"
        required
        pattern="[a-zA-Z\s\-]{1,50}"
        title="Please enter a valid city name"
        class="address-input"
      />
    </div>

    <select id={`state-${type}`} name="state" required>
      <option value="" disabled selected>State</option>
      {
        states.map((state: State) => (
          <option value={state.abbreviation}>{state.name}</option>
        ))
      }
    </select>

    <div class="input-group">
      <input
        type="text"
        id={`zip-${type}`}
        name="zipCode"
        placeholder="Zip Code"
        required
        pattern="[0-9]{5}(-[0-9]{4})?"
        title="Please enter a valid ZIP code (5 digits, or 5+4 format like 12345-6789)"
        class="address-input"
        maxlength="10"
      />
    </div>
  </div>

  <div class="input-group">
    <input
      type="tel"
      id={`phone-${type}`}
      name="phone"
      placeholder="Phone Number"
      required
      pattern="[\+]?[1]?[\s\-\(\)]?[0-9]{3}[\s\-\(\)]?[0-9]{3}[\s\-]?[0-9]{4}"
      title="Please enter a valid phone number (e.g., 123-456-7890 or (123) 456-7890)"
      class="address-input"
    />

    <div class="mb-4 mt-6">
      <button type="button" id="showPaymentBtn" class="cta-button">
        Continue to Payment <span class="arrow">â†’</span>
      </button>
    </div>
  </div>

  <style>
    @import "/style/AddressForm.css";
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const form = document.querySelector(".address-form") as HTMLFormElement;
      const showPaymentBtn = document.getElementById("showPaymentBtn");
      const paymentFormSection = document.getElementById("paymentFormSection");

      if (showPaymentBtn && paymentFormSection && form) {
        showPaymentBtn.addEventListener("click", (e) => {
          e.preventDefault();

          // Use HTML5 form validation
          const isValid = form.checkValidity();

          if (isValid) {
            // All fields are valid, proceed to payment
            paymentFormSection.classList.remove("hidden");
            paymentFormSection.scrollIntoView({ behavior: "smooth" });
          } else {
            // Find the first invalid field and show its validation message
            const firstInvalidField = form.querySelector(
              ":invalid",
            ) as HTMLInputElement;
            if (firstInvalidField) {
              firstInvalidField.focus();
              firstInvalidField.reportValidity();
            }
          }
        });
      }
    });
  </script>
</form>
