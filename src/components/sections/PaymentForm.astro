---
import AddressForm from "./billing/AddressForm.astro";
import MoneyBack from "../shared/MoneyBack.astro";
import { BraintreeHostedFields } from "./billing/BraintreeHostedFields";
---

<div class="billing-form payment-info">
  <div id="checkout-error" class="checkout-error hidden" role="alert"></div>
  <form id="payment-form" class="payment-form">
    <h1 class="shipping-title">Shipping address</h1>
    <input
      type="email"
      id="email"
      placeholder="Email address"
      required
      data-validation-type="email"
      aria-describedby="email-error"
    />
    <div id="email-error" class="error-message" hidden></div>

    <div id="shipping-address-form">
      <AddressForm type="shipping" />
    </div>

    <h2 class="payment-title bold-text">Payment</h2>

    <div class="moneyback-container mobile-only">
      <MoneyBack />
    </div>
    <div class="payment-method">
      <label>
        <input type="radio" name="payment" checked />
        Credit Card
      </label>
      <img src="/assets/checkout/cards.webp" alt="Credit Cards" />
    </div>

    <div class="payment-fields-container">
      <BraintreeHostedFields
        client:visible
        onValidityChange={(isValid) => {
          const submitButton = document.querySelector(
            ".submit-button",
          ) as HTMLButtonElement;
          if (submitButton) {
            submitButton.disabled = !isValid;
          }
        }}
        onTokenize={(payload) => {
          document.dispatchEvent(
            new CustomEvent("payment-tokenized", { detail: payload }),
          );
        }}
      />
      <div class="speech-bubble" hidden aria-hidden="true">
        All transactions are secure and encrypted.
      </div>
    </div>

    <label class="checkbox-label">
      <input type="checkbox" id="same-address" checked />
      Use shipping address as billing address
    </label>

    <div id="billing-address-form" class="billing-address hidden">
      <h2>Billing Address</h2>
      <AddressForm type="billing" />
    </div>

    <button type="submit" class="submit-button" disabled>
      Complete Your Secure Purchase
    </button>
  </form>
</div>

<script>
  import {
    validateField,
    handleBillingAddressVisibility,
    handleSecurityInfoPopup,
    showError,
  } from "../../utils/form/formUtils";
  import {
    getSelectedItems,
    getAddressData,
    calculateTotalAmount,
    processBraintreePayment,
  } from "../../utils/checkout/checkoutService";
  import type { ShoeSelection } from "../../types/checkout";

  // Form elements
  const form = document.querySelector("form") as HTMLFormElement;
  const sameAddressCheckbox = document.getElementById(
    "same-address",
  ) as HTMLInputElement;
  const billingAddressSection = document.getElementById(
    "billing-address-form",
  ) as HTMLElement;
  const lockIcon = document.querySelector(".lock-icon") as HTMLElement;
  const speechBubble = document.querySelector(".speech-bubble") as HTMLElement;
  const emailInput = document.getElementById("email") as HTMLInputElement;

  // Initialize form functionality
  handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
  handleSecurityInfoPopup(lockIcon, speechBubble);

  // Validate all inputs with data-validation-type
  const validatedInputs = Array.from(
    document.querySelectorAll("input[data-validation-type]"),
  ) as HTMLInputElement[];

  validatedInputs.forEach((input) => {
    input.addEventListener("blur", () => validateField(input));
    input.addEventListener("input", () => validateField(input));
  });

  // Handle form submission
  form?.addEventListener("submit", async (event) => {
    event.preventDefault();

    // Validate all fields first
    validatedInputs.forEach((input) => validateField(input));
    if (!form.checkValidity()) {
      return;
    }

    try {
      const shippingForm = document.querySelector(
        "#shipping-address-form form",
      ) as HTMLFormElement;
      const billingForm = document.querySelector(
        "#billing-address-form form",
      ) as HTMLFormElement;

      if (!shippingForm || !emailInput) {
        throw new Error("Required form elements not found");
      }

      const quantity = parseInt(
        localStorage.getItem("selectedQuantity") || "0",
        10,
      );
      const selectedItems: ShoeSelection[] = getSelectedItems();

      if (selectedItems.length === 0 || quantity === 0) {
        showError("No items selected for purchase");
        return;
      }

      // Wait for hosted fields to tokenize
      const paymentTokenized = await new Promise<{ nonce: string }>(
        (resolve) => {
          const handler = (e: CustomEvent) => {
            document.removeEventListener(
              "payment-tokenized",
              handler as EventListener,
            );
            resolve(e.detail);
          };
          document.addEventListener(
            "payment-tokenized",
            handler as EventListener,
          );
          document.dispatchEvent(new CustomEvent("tokenize-payment"));
        },
      );

      const payload = {
        items: selectedItems,
        shippingAddress: getAddressData(shippingForm),
        billingAddress: sameAddressCheckbox.checked
          ? null
          : getAddressData(billingForm),
        email: emailInput.value.trim(),
        totalAmount: calculateTotalAmount(quantity),
      };

      const result = await processBraintreePayment(
        payload,
        paymentTokenized.nonce,
      );

      // Handle successful payment
      console.log("Payment successful:", result);
      // TODO: Redirect to success page or show success message
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "An unexpected error occurred";
      showError(errorMessage);
    }
  });
</script>

<style>
  @import "/style/PaymentForm.css";
</style>
