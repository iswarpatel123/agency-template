---
import AddressForm from "./billing/AddressForm.astro";
import BillingAddressForm from "./billing/BillingAddressForm.astro";
import MoneyBack from "../shared/MoneyBack.astro";
import { BraintreeHostedFields } from "./billing/BraintreeHostedFields";
---

<div class="billing-form payment-info">
  <div id="global-error" class="global-error hidden" role="alert"></div>
  <form id="payment-form" class="payment-form" novalidate>
    <div id="form-overlay" class="form-overlay hidden">
      <div class="spinner"></div>
      <p>Processing your payment...</p>
    </div>

    <h1 class="payment-title bold-text">Payment</h1>

    <div class="moneyback-container mobile-only">
      <MoneyBack />
    </div>
    <div class="payment-method">
      <label>
        <input type="radio" name="payment" checked />
        Credit Card
      </label>
      <img
        src="/assets/checkout/cards.webp"
        alt="Credit Cards"
        loading="lazy"
      />
    </div>

    <div class="payment-fields-container">
      <BraintreeHostedFields
        client:visible
        clientToken={null}
        onValidityChange={(isValid) => {
          const submitButton = document.querySelector(
            ".submit-button",
          ) as HTMLButtonElement;
          if (submitButton) {
            submitButton.disabled = !isValid;
          }
        }}
        onTokenize={(payload) => {
          document.dispatchEvent(
            new CustomEvent("payment-tokenized", { detail: payload }),
          );
        }}
      />
      <div class="speech-bubble" hidden aria-hidden="true">
        All transactions are secure and encrypted.
      </div>
    </div>

    <label class="checkbox-label">
      <input type="checkbox" id="same-address" checked />
      Use shipping address as billing address
    </label>
    <div id="billing-address-section" class="billing-address hidden">
      <BillingAddressForm />
    </div>
    <button type="submit" class="submit-button"
      >Complete Your Secure Purchase</button
    >
  </form>
</div>

<script>
  import {
    handleBillingAddressVisibility,
    handleSecurityInfoPopup,
  } from "../../utils/form/formUtils";
  import {
    getAddressData,
    getSelectedItems,
    calculateTotalAmount,
    processBraintreePayment,
    fetchClientToken,
  } from "../../utils/checkout/checkoutService";

  // State management
  let clientToken: string | null = null;

  // Global error display function
  const showGlobalError = (message: string) => {
    const errorElement = document.getElementById('global-error');
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
      errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
    } else {
      console.error('Global error element not found:', message);
      alert(message);
    }
  };

  const hideGlobalError = () => {
    const errorElement = document.getElementById('global-error');
    if (errorElement) {
      errorElement.classList.add('hidden');
    }
  };

  // Initialize Braintree when payment form becomes visible
  const initializeBraintree = async () => {
    try {
      // Fetch client token
      clientToken = await fetchClientToken();
      
      // Update the BraintreeHostedFields component with the token
      const braintreeComponent = document.querySelector('astro-island[component-export="BraintreeHostedFields"]');
      if (braintreeComponent) {
        const currentProps = JSON.parse(braintreeComponent.getAttribute('props') || '{}');
        braintreeComponent.setAttribute('props', JSON.stringify({
          ...currentProps,
          clientToken
        }));
      }
      
    } catch (error) {
      console.error('Failed to initialize Braintree:', error);
      showGlobalError('Failed to initialize payment system. Please refresh and try again.');
    }
  };

  // Listen for payment form visibility
  const handlePaymentFormVisible = () => {
    if (!clientToken) {
      initializeBraintree();
    }
  };

  // Event handlers
  const handleShowGlobalError = (e: Event) => {
    const customEvent = e as CustomEvent;
    showGlobalError(customEvent.detail.message);
  };

  // Listen for global error events
  document.addEventListener('show-global-error', handleShowGlobalError);

  // Listen for payment form becoming visible
  document.addEventListener('payment-form-visible', handlePaymentFormVisible);

  // Form elements
  const form = document.querySelector("#payment-form") as HTMLFormElement;
  const sameAddressCheckbox = document.getElementById(
    "same-address",
  ) as HTMLInputElement;
  const billingAddressSection = document.getElementById(
    "billing-address-section",
  ) as HTMLElement;
  const lockIcon = document.querySelector(".lock-icon") as HTMLElement;
  const speechBubble = document.querySelector(".speech-bubble") as HTMLElement;
  const submitButton = document.querySelector(
    ".submit-button",
  ) as HTMLButtonElement;

  // Initialize handlers
  handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
  handleSecurityInfoPopup(lockIcon, speechBubble);

  // Event listeners
  sameAddressCheckbox.addEventListener("change", () => {
    handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
    hideGlobalError();
  });

  submitButton?.addEventListener("click", (event) => {
    event.preventDefault();
    hideGlobalError();
    document.dispatchEvent(new CustomEvent("tokenize-payment"));
  });

  const handlePaymentTokenized = async (e: Event) => {
    const customEvent = e as CustomEvent;
    const { nonce, deviceData } = customEvent.detail;
    const formOverlay = document.getElementById("form-overlay");
    formOverlay?.classList.remove("hidden");
    
    hideGlobalError();

    try {
      const shippingForm = document.querySelector(
        'form[data-form-type="shipping"]',
      ) as HTMLFormElement;
      if (!shippingForm) throw new Error("Shipping form not found");

      const emailInput = shippingForm.querySelector(
        'input[type="email"]',
      ) as HTMLInputElement;
      if (!emailInput?.value) throw new Error("Email is required");

      const shippingAddress = getAddressData(shippingForm);
      let billingAddress = null;

      if (!sameAddressCheckbox.checked) {
        const billingForm = document.querySelector(
          'form[data-form-type="billing"]',
        ) as HTMLFormElement;
        
        if (billingForm) {
          billingAddress = getAddressData(billingForm);
        }
      }

      const items = getSelectedItems();
      const quantity = parseInt(
        localStorage.getItem("selectedQuantity") || "1",
        10,
      );
      const totalAmount = calculateTotalAmount(quantity);

      const payload = {
        items,
        shippingAddress,
        billingAddress: billingAddress || shippingAddress,
        email: emailInput.value,
        totalAmount,
      };

      const result = await processBraintreePayment(payload, nonce, deviceData);
      window.location.href = `/order-confirmation?orderId=${result.orderId}`;
    } catch (error) {
      showGlobalError(
        error instanceof Error ? error.message : "An unexpected error occurred",
      );
    } finally {
      formOverlay?.classList.add("hidden");
    }
  };

  document.addEventListener("payment-tokenized", handlePaymentTokenized);

  // Hide error on any user interaction
  document.addEventListener('input', hideGlobalError);
  document.addEventListener('click', hideGlobalError);

  // Cleanup
  window.addEventListener("unload", () => {
    document.removeEventListener('payment-form-visible', handlePaymentFormVisible);
    document.removeEventListener("payment-tokenized", handlePaymentTokenized);
    document.removeEventListener('show-global-error', handleShowGlobalError);
    document.removeEventListener('input', hideGlobalError);
    document.removeEventListener('click', hideGlobalError);
  });
</script>

<style>
  @import "/style/PaymentForm.css";
  
  .global-error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #fecaca;
    padding: 1rem;
    border-radius: 0.375rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    text-align: center;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  }

  .global-error.hidden {
    display: none;
  }

  .billing-address {
    margin-top: 1rem;
  }
</style>