---
import AddressForm from "./billing/AddressForm.astro";
import MoneyBack from "../shared/MoneyBack.astro";
import { BraintreeHostedFields } from "./billing/BraintreeHostedFields";
---

<div class="billing-form payment-info">
  <div id="checkout-error" class="checkout-error hidden" role="alert"></div>
  <form id="payment-form" class="payment-form" novalidate>
    <div id="form-overlay" class="form-overlay hidden">
      <div class="spinner"></div>
      <p>Processing your payment...</p>
    </div>

    <h1 class="payment-title bold-text">Payment</h1>

    <div class="moneyback-container mobile-only">
      <MoneyBack />
    </div>
    <div class="payment-method">
      <label>
        <input type="radio" name="payment" checked />
        Credit Card
      </label>
      <img
        src="/assets/checkout/cards.webp"
        alt="Credit Cards"
        loading="lazy"
      />
    </div>

    <div class="payment-fields-container">
      <BraintreeHostedFields
        client:visible
        onValidityChange={(isValid) => {
          const submitButton = document.querySelector(
            ".submit-button",
          ) as HTMLButtonElement;
          if (submitButton) {
            submitButton.disabled = !isValid;
          }
        }}
        onTokenize={(payload) => {
          // Pass deviceData along with nonce
          document.dispatchEvent(
            new CustomEvent("payment-tokenized", { detail: payload }),
          );
        }}
      />
      <div class="speech-bubble" hidden aria-hidden="true">
        All transactions are secure and encrypted.
      </div>
    </div>

    <label class="checkbox-label">
      <input type="checkbox" id="same-address" checked />
      Use shipping address as billing address
    </label>
    <div id="billing-address-section" class="billing-address hidden">
      <h2>Billing Address</h2>
      <AddressForm type="billing" />
    </div>
    <button type="submit" class="submit-button"
      >Complete Your Secure Purchase</button
    >
  </form>
</div>

<script>
  import {
    handleBillingAddressVisibility,
    handleSecurityInfoPopup,
    showError,
  } from "../../utils/form/formUtils";
  import {
    getAddressData,
    getSelectedItems,
    calculateTotalAmount,
    PaymentQueue,
  } from "../../utils/checkout/checkoutService";

  // Form elements
  const form = document.querySelector("#payment-form") as HTMLFormElement;
  const sameAddressCheckbox = document.getElementById(
    "same-address",
  ) as HTMLInputElement;
  const billingAddressSection = document.getElementById(
    "billing-address-section",
  ) as HTMLElement;
  const lockIcon = document.querySelector(".lock-icon") as HTMLElement;
  const speechBubble = document.querySelector(".speech-bubble") as HTMLElement;
  const submitButton = document.querySelector(
    ".submit-button",
  ) as HTMLButtonElement;

  // Initialize handlers
  handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
  handleSecurityInfoPopup(lockIcon, speechBubble);

  // Event listeners
  sameAddressCheckbox.addEventListener("change", () => {
    handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
  });

  submitButton?.addEventListener("click", (event) => {
    event.preventDefault();
    document.dispatchEvent(new CustomEvent("tokenize-payment"));
  });

  const handlePaymentTokenized = async (e: CustomEvent) => {
    const { nonce, deviceData } = e.detail;
    const formOverlay = document.getElementById("form-overlay");
    formOverlay?.classList.remove("hidden");
    const checkoutError = document.getElementById("checkout-error");
    checkoutError?.classList.add("hidden");

    try {
      const shippingForm = document.querySelector(
        'form[data-form-type="shipping"]',
      ) as HTMLFormElement;
      if (!shippingForm) throw new Error("Shipping form not found");

      const emailInput = shippingForm.querySelector(
        'input[type="email"]',
      ) as HTMLInputElement;
      if (!emailInput?.value) throw new Error("Email is required");

      const shippingAddress = getAddressData(shippingForm);
      let billingAddress = null;

      if (!sameAddressCheckbox.checked) {
        const billingForm = document.querySelector(
          'form[data-form-type="billing"]',
        ) as HTMLFormElement;
        if (billingForm) {
          billingAddress = getAddressData(billingForm);
        }
      }

      const items = getSelectedItems();
      const quantity = parseInt(
        localStorage.getItem("selectedQuantity") || "1",
        10,
      );
      const totalAmount = calculateTotalAmount(quantity);

      const payload = {
        items,
        shippingAddress,
        billingAddress: billingAddress || shippingAddress,
        email: emailInput.value,
        totalAmount,
      };

      const paymentQueue = new PaymentQueue();
      const result = await paymentQueue.process(payload, nonce, deviceData);

      window.location.href = `/order-confirmation?orderId=${result.orderId}`;
    } catch (error) {
      showError(
        error instanceof Error ? error.message : "An unexpected error occurred",
      );
    } finally {
      formOverlay?.classList.add("hidden");
    }
  };

  document.addEventListener(
    "payment-tokenized",
    handlePaymentTokenized as unknown as EventListener,
  );

  // Cleanup
  window.addEventListener("unload", () => {
    document.removeEventListener(
      "payment-tokenized",
      handlePaymentTokenized as unknown as EventListener,
    );
  });
</script>

<style>
  @import "/style/PaymentForm.css";
</style>
