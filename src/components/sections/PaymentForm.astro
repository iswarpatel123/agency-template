---
import AddressForm from "./billing/AddressForm.astro";
import MoneyBack from "../shared/MoneyBack.astro";
import { BraintreeHostedFields } from "./billing/BraintreeHostedFields";
---

<div class="billing-form payment-info">
  <div id="checkout-error" class="checkout-error hidden" role="alert"></div>
  <form id="payment-form" class="payment-form" novalidate>
    <div id="form-overlay" class="form-overlay hidden">
      <div class="spinner"></div>
      <p>Processing your payment...</p>
    </div>

    <h1 class="payment-title bold-text">Payment</h1>

    <div class="moneyback-container mobile-only">
      <MoneyBack />
    </div>
    <div class="payment-method">
      <label>
        <input type="radio" name="payment" checked />
        Credit Card
      </label>
      <img
        src="/assets/checkout/cards.webp"
        alt="Credit Cards"
        loading="lazy"
      />
    </div>

    <div class="payment-fields-container">
      <BraintreeHostedFields
        client:visible
        onValidityChange={(isValid) => {
          const submitButton = document.querySelector(
            ".submit-button",
          ) as HTMLButtonElement;
          if (submitButton) {
            submitButton.disabled = !isValid;
          }
        }}
        onTokenize={(payload) => {
          document.dispatchEvent(
            new CustomEvent("payment-tokenized", { detail: payload }),
          );
        }}
      />
      <div class="speech-bubble" hidden aria-hidden="true">
        All transactions are secure and encrypted.
      </div>
    </div>

    <label class="checkbox-label">
      <input type="checkbox" id="same-address" checked />
      Use shipping address as billing address
    </label>
    <div id="billing-address-section" class="billing-address hidden">
      <h2>Billing Address</h2>
      <AddressForm type="billing" />
    </div>
    <button type="submit" class="submit-button"
      >Complete Your Secure Purchase</button
    >
  </form>
</div>

<script>
  import {
    validateField,
    handleBillingAddressVisibility,
    handleSecurityInfoPopup,
    showError,
  } from "../../utils/form/formUtils";

  // Form elements
  const form = document.querySelector("form") as HTMLFormElement;
  const sameAddressCheckbox = document.getElementById(
    "same-address",
  ) as HTMLInputElement;
  const billingAddressSection = document.getElementById(
    "billing-address-section",
  ) as HTMLElement;
  const lockIcon = document.querySelector(".lock-icon") as HTMLElement;
  const speechBubble = document.querySelector(".speech-bubble") as HTMLElement;
  const emailInput = document.querySelector(
    'input[type="email"]',
  ) as HTMLInputElement;
  const validatedInputs = Array.from(
    document.querySelectorAll("input[data-validation-type]"),
  ) as HTMLInputElement[];

  // Initialize billing address visibility and security popup handlers
  handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
  handleSecurityInfoPopup(lockIcon, speechBubble);

  // Handle checkbox change for billing address visibility
  sameAddressCheckbox.addEventListener("change", () => {
    handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
  });

  // Handle form submission
  form?.addEventListener("submit", (event) => {
    event.preventDefault();
    document.dispatchEvent(new CustomEvent("tokenize-payment"));
  });

  // Handle payment tokenized event
  const handlePaymentTokenized = async (e: CustomEvent) => {
    const { nonce } = e.detail;
    const formOverlay = document.getElementById("form-overlay");
    formOverlay?.classList.remove("hidden");

    try {
      // Your existing payment processing logic...
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "An unexpected error occurred";
      showError(errorMessage);
    } finally {
      formOverlay?.classList.add("hidden");
    }
  };

  document.addEventListener(
    "payment-tokenized",
    handlePaymentTokenized as unknown as EventListener,
  );

  // Cleanup
  window.addEventListener("unload", () => {
    form?.removeEventListener("submit", (event) => {
      event.preventDefault();
      validatedInputs.forEach((input) => validateField(input, true));
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }
      document.dispatchEvent(new CustomEvent("tokenize-payment"));
    });
    document.removeEventListener(
      "payment-tokenized",
      handlePaymentTokenized as unknown as EventListener,
    );
  });
</script>

<style>
  @import "/style/PaymentForm.css";
</style>
