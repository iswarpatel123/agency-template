/add src/components / sections / PaymentForm.astro src / components / sections / billing / BraintreeHostedFields.tsx
src / utils / checkout / checkoutService.ts     src / utils / form / formUtils.ts src / utils / checkout / appwrite.ts

I am giving you partial code for paymentform and formutils.after braintree was integrated lot fo form validation and securityinfo popup etc are missing.put them back.make sure BraintreeHostedFields still works

paymentform.astro

---
import { getCurrentYear } from "../../utils/general";
import AddressForm from "./billing/AddressForm.astro";
import MoneyBack from "../shared/MoneyBack.astro";
---

    <div class="billing-form payment-info" >
        <div id="checkout-error" class="checkout-error hidden" role = "alert" > </div>
            < form id = "payment-form" class="payment-form" >
                <h1 class="shipping-title" > Shipping address </h1>
                    < input
type = "email"
placeholder = "Email address"
required
data - validation - type="email"
aria - describedby="email-error"
    />
    <AddressForm type="shipping" />

        <h2 class="payment-title bold-text" > Payment </h2>

            < div class="moneyback-container mobile-only" >
                <MoneyBack />
                </div>
                < div class="payment-method" >
                    <label>
                    <input type="radio" name = "payment" checked />
                        Credit Card
                            </label>
                            < img src = "/assets/checkout/cards.webp" alt = "Credit Cards" />
                                </div>
                                < div class="card-number-container" >
                                    <input
        type="text"
id = "card-number"
placeholder = "Card number"
required
data - validation - type="cardNumber"
    />
    <img src="/assets/checkout/card-lock.webp" alt = "Lock" class="lock-icon" />
        <div class="speech-bubble" hidden aria - hidden="true" >
            All transactions are secure and encrypted.
      </div>
                </div>
                < div class="expiry-security" >
                    <select required >
                    <option value="" disabled selected > Month </option>
                        < option value = "01" > (01) January </option>
                            < option value = "02" > (02) February </option>
                                < option value = "03" > (03) March </option>
                                    < option value = "04" > (04) April </option>
                                        < option value = "05" > (05) May </option>
                                            < option value = "06" > (06) June </option>
                                                < option value = "07" > (07) July </option>
                                                    < option value = "08" > (08) August </option>
                                                        < option value = "09" > (09) September </option>
                                                            < option value = "10" > (10) October </option>
                                                                < option value = "11" > (11) November </option>
                                                                    < option value = "12" > (12) December </option>
                                                                        </select>
                                                                        < select required >
                                                                            <option value="" disabled selected > Year </option>
{
    Array.from({ length: 19 }, (_, i) => {
        const year = getCurrentYear() + i;
        return <option value={ year }> { year } </option>;
    })
}
</select>
    < input type = "text" placeholder = "Security code" required />
        </div>
        < label class="checkbox-label" >
            <input type="checkbox" id = "same-address" checked />
                Use shipping address as billing address
                    </label>
                    < div id = "billing-address" class="billing-address hidden" >
                        <h2>Billing Address </h2>
                            < AddressForm type = "billing" />
                                </div>
                                < button type = "submit" class="submit-button"
                                    > Complete Your Secure Purchase </button
                                        >
                                        </form>
                                        </div>

                                        <script>
import {
    debouncedValidate,
    validateField,
    formatCardNumber,
    handleFormSubmission,
} from "../../utils/form/formUtils";

import { handleBillingAddressVisibility, handleSecurityInfoPopup } from "../../utils/form/formUtils";

// Form elements
const form = document.querySelector("form") as HTMLFormElement;
const sameAddressCheckbox = document.getElementById(
    "same-address",
) as HTMLInputElement;
const billingAddressSection = document.getElementById(
    "billing-address",
) as HTMLElement;
const lockIcon = document.querySelector(".lock-icon") as HTMLElement;
const speechBubble = document.querySelector(".speech-bubble") as HTMLElement;
const cardNumberInput = document.getElementById(
    "card-number",
) as HTMLInputElement | null;
const emailInput = document.querySelector(
    'input[type="email"]',
) as HTMLInputElement;
const validatedInputs = Array.from(
    document.querySelectorAll("input[data-validation-type]"),
) as HTMLInputElement[];

const phoneInputs = Array.from(
    document.querySelectorAll("input[data-validation-type='phoneNumber']"),
) as HTMLInputElement[];

phoneInputs.forEach((input) => {
    input.addEventListener("input", () => validateField(input));
});

handleBillingAddressVisibility(sameAddressCheckbox, billingAddressSection);
handleSecurityInfoPopup(lockIcon, speechBubble);

form?.addEventListener("input", (event) => {
    const target = event.target as HTMLInputElement;
    if (target.dataset.validationType) {
        debouncedValidate(target);
    }
});

validatedInputs.forEach((input) => {
    input.addEventListener("input", () => validateField(input));
});

cardNumberInput?.addEventListener("input", () => {
    formatCardNumber(cardNumberInput);
});

// Initialize form handling
form?.addEventListener("submit", (event) => {
    event.preventDefault();

    validatedInputs.forEach((input) => validateField(input));

    if (emailInput) {
        validateField(emailInput);
    }

    if (cardNumberInput) {
        formatCardNumber(cardNumberInput);
        validateField(cardNumberInput);
    }

    const isFormValid = validatedInputs.every((input) => input.checkValidity());

    if (isFormValid) {
        handleFormSubmission(event);
    }
});
</script>
    <style>
@import "/style/PaymentForm.css";
</style>

    ==

    formutils.ts

import { debounce } from "../general"; // Corrected import path
import { validationRules } from "../validation/validationRules";
import type {
    CheckoutPayload,
    ShoeSelection,
} from "../../types/checkout";
import { getSelectedItems, getAddressData, calculateTotalAmount, createCheckoutSession } from "../checkout/checkoutService";

export function handleBillingAddressVisibility(
    sameAddressCheckbox: HTMLInputElement | null,
    billingAddressSection: HTMLElement | null,
): void {
    sameAddressCheckbox?.addEventListener("change", () => {
        billingAddressSection?.classList.toggle(// @ts-ignore
            "hidden",
            sameAddressCheckbox.checked,
        );
    });
}

export function handleSecurityInfoPopup(
    lockIcon: HTMLElement | null,
    speechBubble: HTMLElement | null,
): void {
    if (lockIcon && speechBubble) {
        lockIcon.addEventListener("click", (event) => {
            event.stopPropagation();
            speechBubble.toggleAttribute("hidden");// @ts-ignore
            speechBubble.setAttribute(
                "aria-hidden",// @ts-ignore
                speechBubble.hasAttribute("hidden").toString(),
            );
        });

        document.addEventListener("click", () => {
            if (!speechBubble.hasAttribute("hidden")) {
                speechBubble.setAttribute("hidden", "");
                speechBubble.setAttribute("aria-hidden", "true");// @ts-ignore
            }
        });
    }
}

/**
 * Debounced validation function.
 * It will delay the validation call for the specified time in miliseconds.
 */
export function debouncedValidate(
    input: HTMLInputElement,
    delay: number = 300,
): void {
    const debounced = debounce((inputElement: HTMLInputElement) => {
        validateField(inputElement);
    }, delay);

    debounced(input);
}
export function validateField(input: HTMLInputElement): void {
    const validationType = input.dataset.validationType;
    if (!validationType || !validationRules[validationType]) return;

    const value = input.value.trim();
    const rule = validationRules[validationType];
    const isValid = value.length === 0 || rule.validator(value);

    input.setAttribute("aria-invalid", (!isValid).toString());
    const errorId = `${input.id}-error`;
    const errorElement = document.getElementById(errorId);

    if (errorElement) {
        errorElement.textContent = isValid ? "" : rule.errorMessage;
        errorElement.hidden = isValid;
    }
}
export function formatCardNumber(input: HTMLInputElement): void {
    const value = input.value.replace(/\s/g, "");
    input.value = value.replace(/(\d{4})(?=\d)/g, "$1 ");
}

export function showError(message: string): void {
    const errorDiv = document.getElementById("checkout-error");
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove("hidden");
        setTimeout(() => {
            errorDiv.classList.add("hidden");
        }, 5000);
    }
}